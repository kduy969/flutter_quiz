// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:quiz/test/pokemon_entity.dart';
import 'package:quiz/generated/json/pokemon_entity.g.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  }
	//Go back to a single instance by type
	static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
		final String type = M.toString();
		if(type == (PokemonEntity).toString()){
			return PokemonEntity.fromJson(json) as M;
		}
		if(type == (PokemonAbilities).toString()){
			return PokemonAbilities.fromJson(json) as M;
		}
		if(type == (PokemonAbilitiesAbility).toString()){
			return PokemonAbilitiesAbility.fromJson(json) as M;
		}
		if(type == (PokemonForms).toString()){
			return PokemonForms.fromJson(json) as M;
		}
		if(type == (PokemonGameIndices).toString()){
			return PokemonGameIndices.fromJson(json) as M;
		}
		if(type == (PokemonGameIndicesVersion).toString()){
			return PokemonGameIndicesVersion.fromJson(json) as M;
		}
		if(type == (PokemonMoves).toString()){
			return PokemonMoves.fromJson(json) as M;
		}
		if(type == (PokemonMovesMove).toString()){
			return PokemonMovesMove.fromJson(json) as M;
		}
		if(type == (PokemonMovesVersionGroupDetails).toString()){
			return PokemonMovesVersionGroupDetails.fromJson(json) as M;
		}
		if(type == (PokemonMovesVersionGroupDetailsMoveLearnMethod).toString()){
			return PokemonMovesVersionGroupDetailsMoveLearnMethod.fromJson(json) as M;
		}
		if(type == (PokemonMovesVersionGroupDetailsVersionGroup).toString()){
			return PokemonMovesVersionGroupDetailsVersionGroup.fromJson(json) as M;
		}
		if(type == (PokemonSpecies).toString()){
			return PokemonSpecies.fromJson(json) as M;
		}
		if(type == (PokemonSprites).toString()){
			return PokemonSprites.fromJson(json) as M;
		}
		if(type == (PokemonSpritesOther).toString()){
			return PokemonSpritesOther.fromJson(json) as M;
		}
		if(type == (PokemonSpritesOtherDreamWorld).toString()){
			return PokemonSpritesOtherDreamWorld.fromJson(json) as M;
		}
		if(type == (PokemonSpritesOtherHome).toString()){
			return PokemonSpritesOtherHome.fromJson(json) as M;
		}
		if(type == (PokemonSpritesOtherOfficialArtwork).toString()){
			return PokemonSpritesOtherOfficialArtwork.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersions).toString()){
			return PokemonSpritesVersions.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationI).toString()){
			return PokemonSpritesVersionsGenerationI.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIRedBlue).toString()){
			return PokemonSpritesVersionsGenerationIRedBlue.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIYellow).toString()){
			return PokemonSpritesVersionsGenerationIYellow.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIi).toString()){
			return PokemonSpritesVersionsGenerationIi.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIiCrystal).toString()){
			return PokemonSpritesVersionsGenerationIiCrystal.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIiGold).toString()){
			return PokemonSpritesVersionsGenerationIiGold.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIiSilver).toString()){
			return PokemonSpritesVersionsGenerationIiSilver.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIii).toString()){
			return PokemonSpritesVersionsGenerationIii.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIiiEmerald).toString()){
			return PokemonSpritesVersionsGenerationIiiEmerald.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIiiFireredLeafgreen).toString()){
			return PokemonSpritesVersionsGenerationIiiFireredLeafgreen.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIiiRubySapphire).toString()){
			return PokemonSpritesVersionsGenerationIiiRubySapphire.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIv).toString()){
			return PokemonSpritesVersionsGenerationIv.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIvDiamondPearl).toString()){
			return PokemonSpritesVersionsGenerationIvDiamondPearl.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver).toString()){
			return PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationIvPlatinum).toString()){
			return PokemonSpritesVersionsGenerationIvPlatinum.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationV).toString()){
			return PokemonSpritesVersionsGenerationV.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationVBlackWhite).toString()){
			return PokemonSpritesVersionsGenerationVBlackWhite.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationVBlackWhiteAnimated).toString()){
			return PokemonSpritesVersionsGenerationVBlackWhiteAnimated.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationVi).toString()){
			return PokemonSpritesVersionsGenerationVi.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire).toString()){
			return PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationViXY).toString()){
			return PokemonSpritesVersionsGenerationViXY.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationVii).toString()){
			return PokemonSpritesVersionsGenerationVii.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationViiIcons).toString()){
			return PokemonSpritesVersionsGenerationViiIcons.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationViiUltraSunUltraMoon).toString()){
			return PokemonSpritesVersionsGenerationViiUltraSunUltraMoon.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationViii).toString()){
			return PokemonSpritesVersionsGenerationViii.fromJson(json) as M;
		}
		if(type == (PokemonSpritesVersionsGenerationViiiIcons).toString()){
			return PokemonSpritesVersionsGenerationViiiIcons.fromJson(json) as M;
		}
		if(type == (PokemonStats).toString()){
			return PokemonStats.fromJson(json) as M;
		}
		if(type == (PokemonStatsStat).toString()){
			return PokemonStatsStat.fromJson(json) as M;
		}
		if(type == (PokemonTypes).toString()){
			return PokemonTypes.fromJson(json) as M;
		}
		if(type == (PokemonTypesType).toString()){
			return PokemonTypesType.fromJson(json) as M;
		}

		print("$type not found");

		return null;
}

  //list is returned by type
	static M? _getListChildType<M>(List<dynamic> data) {
		if(<PokemonEntity>[] is M){
			return data.map<PokemonEntity>((e) => PokemonEntity.fromJson(e)).toList() as M;
		}
		if(<PokemonAbilities>[] is M){
			return data.map<PokemonAbilities>((e) => PokemonAbilities.fromJson(e)).toList() as M;
		}
		if(<PokemonAbilitiesAbility>[] is M){
			return data.map<PokemonAbilitiesAbility>((e) => PokemonAbilitiesAbility.fromJson(e)).toList() as M;
		}
		if(<PokemonForms>[] is M){
			return data.map<PokemonForms>((e) => PokemonForms.fromJson(e)).toList() as M;
		}
		if(<PokemonGameIndices>[] is M){
			return data.map<PokemonGameIndices>((e) => PokemonGameIndices.fromJson(e)).toList() as M;
		}
		if(<PokemonGameIndicesVersion>[] is M){
			return data.map<PokemonGameIndicesVersion>((e) => PokemonGameIndicesVersion.fromJson(e)).toList() as M;
		}
		if(<PokemonMoves>[] is M){
			return data.map<PokemonMoves>((e) => PokemonMoves.fromJson(e)).toList() as M;
		}
		if(<PokemonMovesMove>[] is M){
			return data.map<PokemonMovesMove>((e) => PokemonMovesMove.fromJson(e)).toList() as M;
		}
		if(<PokemonMovesVersionGroupDetails>[] is M){
			return data.map<PokemonMovesVersionGroupDetails>((e) => PokemonMovesVersionGroupDetails.fromJson(e)).toList() as M;
		}
		if(<PokemonMovesVersionGroupDetailsMoveLearnMethod>[] is M){
			return data.map<PokemonMovesVersionGroupDetailsMoveLearnMethod>((e) => PokemonMovesVersionGroupDetailsMoveLearnMethod.fromJson(e)).toList() as M;
		}
		if(<PokemonMovesVersionGroupDetailsVersionGroup>[] is M){
			return data.map<PokemonMovesVersionGroupDetailsVersionGroup>((e) => PokemonMovesVersionGroupDetailsVersionGroup.fromJson(e)).toList() as M;
		}
		if(<PokemonSpecies>[] is M){
			return data.map<PokemonSpecies>((e) => PokemonSpecies.fromJson(e)).toList() as M;
		}
		if(<PokemonSprites>[] is M){
			return data.map<PokemonSprites>((e) => PokemonSprites.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesOther>[] is M){
			return data.map<PokemonSpritesOther>((e) => PokemonSpritesOther.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesOtherDreamWorld>[] is M){
			return data.map<PokemonSpritesOtherDreamWorld>((e) => PokemonSpritesOtherDreamWorld.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesOtherHome>[] is M){
			return data.map<PokemonSpritesOtherHome>((e) => PokemonSpritesOtherHome.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesOtherOfficialArtwork>[] is M){
			return data.map<PokemonSpritesOtherOfficialArtwork>((e) => PokemonSpritesOtherOfficialArtwork.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersions>[] is M){
			return data.map<PokemonSpritesVersions>((e) => PokemonSpritesVersions.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationI>[] is M){
			return data.map<PokemonSpritesVersionsGenerationI>((e) => PokemonSpritesVersionsGenerationI.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIRedBlue>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIRedBlue>((e) => PokemonSpritesVersionsGenerationIRedBlue.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIYellow>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIYellow>((e) => PokemonSpritesVersionsGenerationIYellow.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIi>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIi>((e) => PokemonSpritesVersionsGenerationIi.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIiCrystal>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIiCrystal>((e) => PokemonSpritesVersionsGenerationIiCrystal.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIiGold>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIiGold>((e) => PokemonSpritesVersionsGenerationIiGold.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIiSilver>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIiSilver>((e) => PokemonSpritesVersionsGenerationIiSilver.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIii>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIii>((e) => PokemonSpritesVersionsGenerationIii.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIiiEmerald>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIiiEmerald>((e) => PokemonSpritesVersionsGenerationIiiEmerald.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIiiFireredLeafgreen>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIiiFireredLeafgreen>((e) => PokemonSpritesVersionsGenerationIiiFireredLeafgreen.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIiiRubySapphire>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIiiRubySapphire>((e) => PokemonSpritesVersionsGenerationIiiRubySapphire.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIv>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIv>((e) => PokemonSpritesVersionsGenerationIv.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIvDiamondPearl>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIvDiamondPearl>((e) => PokemonSpritesVersionsGenerationIvDiamondPearl.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver>((e) => PokemonSpritesVersionsGenerationIvHeartgoldSoulsilver.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationIvPlatinum>[] is M){
			return data.map<PokemonSpritesVersionsGenerationIvPlatinum>((e) => PokemonSpritesVersionsGenerationIvPlatinum.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationV>[] is M){
			return data.map<PokemonSpritesVersionsGenerationV>((e) => PokemonSpritesVersionsGenerationV.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationVBlackWhite>[] is M){
			return data.map<PokemonSpritesVersionsGenerationVBlackWhite>((e) => PokemonSpritesVersionsGenerationVBlackWhite.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationVBlackWhiteAnimated>[] is M){
			return data.map<PokemonSpritesVersionsGenerationVBlackWhiteAnimated>((e) => PokemonSpritesVersionsGenerationVBlackWhiteAnimated.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationVi>[] is M){
			return data.map<PokemonSpritesVersionsGenerationVi>((e) => PokemonSpritesVersionsGenerationVi.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire>[] is M){
			return data.map<PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire>((e) => PokemonSpritesVersionsGenerationViOmegarubyAlphasapphire.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationViXY>[] is M){
			return data.map<PokemonSpritesVersionsGenerationViXY>((e) => PokemonSpritesVersionsGenerationViXY.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationVii>[] is M){
			return data.map<PokemonSpritesVersionsGenerationVii>((e) => PokemonSpritesVersionsGenerationVii.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationViiIcons>[] is M){
			return data.map<PokemonSpritesVersionsGenerationViiIcons>((e) => PokemonSpritesVersionsGenerationViiIcons.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationViiUltraSunUltraMoon>[] is M){
			return data.map<PokemonSpritesVersionsGenerationViiUltraSunUltraMoon>((e) => PokemonSpritesVersionsGenerationViiUltraSunUltraMoon.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationViii>[] is M){
			return data.map<PokemonSpritesVersionsGenerationViii>((e) => PokemonSpritesVersionsGenerationViii.fromJson(e)).toList() as M;
		}
		if(<PokemonSpritesVersionsGenerationViiiIcons>[] is M){
			return data.map<PokemonSpritesVersionsGenerationViiiIcons>((e) => PokemonSpritesVersionsGenerationViiiIcons.fromJson(e)).toList() as M;
		}
		if(<PokemonStats>[] is M){
			return data.map<PokemonStats>((e) => PokemonStats.fromJson(e)).toList() as M;
		}
		if(<PokemonStatsStat>[] is M){
			return data.map<PokemonStatsStat>((e) => PokemonStatsStat.fromJson(e)).toList() as M;
		}
		if(<PokemonTypes>[] is M){
			return data.map<PokemonTypes>((e) => PokemonTypes.fromJson(e)).toList() as M;
		}
		if(<PokemonTypesType>[] is M){
			return data.map<PokemonTypesType>((e) => PokemonTypesType.fromJson(e)).toList() as M;
		}

		print("${M.toString()} not found");

		return null;
}

  static M? fromJsonAsT<M>(dynamic json) {
		if(json == null){
			return null;
		}
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json as Map<String, dynamic>);
		}
	}
}
